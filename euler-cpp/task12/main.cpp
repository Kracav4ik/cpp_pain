#include <stdio.h>
#include <string.h>
#include <math.h>

struct Vec2d {
	float x;
	float y;
};

struct AABB {
	Vec2d bbl;
	Vec2d fur;
};

int list[1000000];
int len = 0;

int arr[20][20] = {
	{ 8, 02, 22, 97, 38, 15, 00, 40, 00, 75, 04, 05, 07, 78, 52, 12, 50, 77, 91,  8},
	{49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 04, 56, 62, 00},
	{81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 03, 49, 13, 36, 65},
	{52, 70, 95, 23, 04, 60, 11, 42, 69, 24, 68, 56, 01, 32, 56, 71, 37, 02, 36, 91},
	{22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80},
	{24, 47, 32, 60, 99, 03, 45, 02, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50},
	{32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70},
	{67, 26, 20, 68, 02, 62, 12, 20, 95, 63, 94, 39, 63,  8, 40, 91, 66, 49, 94, 21},
	{24, 55, 58, 05, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72},
	{21, 36, 23,  9, 75, 00, 76, 44, 20, 45, 35, 14, 00, 61, 33, 97, 34, 31, 33, 95},
	{78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 03, 80, 04, 62, 16, 14,  9, 53, 56, 92},
	{16, 39, 05, 42, 96, 35, 31, 47, 55, 58, 88, 24, 00, 17, 54, 24, 36, 29, 85, 57},
	{86, 56, 00, 48, 35, 71, 89, 07, 05, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58},
	{19, 80, 81, 68, 05, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 04, 89, 55, 40},
	{04, 52,  8, 83, 97, 35, 99, 16, 07, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66},
	{88, 36, 68, 87, 57, 62, 20, 72, 03, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69},
	{04, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18,  8, 46, 29, 32, 40, 62, 76, 36},
	{20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 04, 36, 16},
	{20, 73, 35, 29, 78, 31, 90, 01, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 05, 54},
	{01, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 01, 89, 19, 67, 48}
};


int right(int i, int j) {
	return arr[i][j] * arr[i][j+1] * arr[i][j+2] * arr[i][j+3];
}

int down(int i, int j) {
	return arr[i][j] * arr[i+1][j] * arr[i+2][j] * arr[i+3][j];
}

int diagon_1(int i, int j) {
	return arr[i][j] * arr[i+1][j+1] * arr[i+2][j+2] * arr[i+3][j+3];
}

int diagon_2(int i, int j) {
	return arr[i][j] * arr[i+1][j-1] * arr[i+2][j-2] * arr[i+3][j-3];
}

bool is_prime(int x) {
	float x_2 = sqrt(x);
	for (int i = 0; i < len; i += 1) {
		if (list[i] > x_2) {
			return true;
		}
		if (x % list[i] == 0) {
			return false;
		}
	}
	return true;

}

void add(int x) {
	list[len] = x;
	len += 1;
}

int pif(){
	for(int a = 0; a < 1000; a += 1){
		for(int b = 0; b < a; b += 1){
			int c = 1000 - a - b;
			if (c*c == a*a + b*b) {
				printf("%d, a=> %d, b=> %d, c=> %d\n", a*b*c, a, b, c);
				return a*b*c;
			}
		}
	}
	return -1;
}



const char* MEGA_STRING = 
	"96983520312774506326239578318016984801869478851843"
	"73167176531330624919225119674426574742355349194934"
	"858615607891129494954595017379583319528532 8805511"
	"12540698747158523863050715693290963295227443043557"
	"66896648950445244523161731856403098711121722383113"
	"622298934233803 8135336276614282806444486645238749"
	"3035890729629049156044077239071381051585930796 866"
	"701724271218839987979 879227492190169972 888093776"
	"65727333001053367881220235421809751254540594752243"
	"52584907711670556013604839586446706324415722155397"
	"5369781797784617406495514929 862569321978468622482"
	"83972241375657056057490261407972968652414535100474"
	"821663704844031998900 8895243450658541227588666881"
	"1642717147992444292823 863465674813919123162824586"
	"17866458359124566529476545682848912883142607690042"
	"242190226710556263211111093705442175069416589604 8"
	"07198403850962455444362981230987879927244284909188"
	"84580156166097919133875499200524063689912560717606"
	"7163626956188267042825248360 823257530420752963450"
	"05886116467109405077541002256983155200055935729725"
	"7163626956188267042825248360 823257530420752963450"

;

int fac(int num) {
	int result=0;
	double new_num = sqrt(num);
	for (int i = 1; i <= new_num; i += 1) {
		if(num % i == 0) {
			result += 1;
		}
	}
	return result * 2;
}

int convert(char c) {
	return c - '0';
}

long long mul(const char* s) {
	long long result = 1;
	for (int i = 0; i < 13; i += 1) {
		result *= convert(s[i]);
	}
	return result;
}
int main() {
	int m_sum;
	for (int num = 1; true; num += 1) {
		m_sum = fac(num*(num+1)/2);
		if (m_sum < 502) {
			if (num  != 0) {
				printf("result %3i %i\n", m_sum,num);
			}
		}
		else {
			printf("FINAL result %i %i makes %i\n", m_sum,num, num*(num+1)/2);
			break;
		}
	}
	return 0;
}


void trash() {
	// char s[10];
	// sprintf(s, "%d", 105);
	// long pal = -1;
	// for (int i = 100; i < 1000; i += 1) {
		// for (int j = 100; j < 1000; j += 1) {
			// if (is_palindrome(i*j) && pal < i*j) {
				// pal = i*j;
			// }
		// }
	// }
	// printf("%d", 16*9*5*7*11*13*17*19);
	// printf("%d\n", strlen(s));
	// s[3] = 34;
	// s[4] = 32;
	// s[5] = 33;	
		// int sum=0;
	// int sum2=0;
	// for (int i = 1; i < 101;i += 1) {
		// sum += i*i;
		// sum2 += i;
	// }
		// for(int i = 2; len < 10001; i += 1) {
		// if (is_prime(i)) {
		// add(i);
		// }
	// }


}

void f() {
	for (int i = 0; i < 10; i += 1) {
		printf("%d\n", i);
	}
}

bool is_palindrome(int number) {
	char list[10];
	int div = 100000;
	for (int i = 0 ; i < 6; i += 1) {
		list[i] = number / div;
		number -= list[i] * div;
		div /= 10;
	}
	if (list[0] == list[5] && list[1] == list[4] && list[2] == list[3]) {
		return true;
	}
	return false;
	
}
